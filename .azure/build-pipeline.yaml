# Triggers
trigger:
  branches:
    include:
      - 'main'
      - 'release-*'
  tags:
    include:
      - '*'
pr:
  autoCancel: true
  branches:
    include:
      - '*'

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isTagBranch: $[startsWith(variables['build.sourceBranch'], 'refs/tags/')]

jobs:
  - job: 'main_branch_build'
    displayName: 'Build'
    # Set timeout for jobs
    timeoutInMinutes: 60
    strategy:
      matrix:
        'java-11':
          JDK_VERSION: '11'
        'java-17':
          JDK_VERSION: '17'
    # Base system
    pool:
      vmImage: 'Ubuntu-22.04'
    # Pipeline steps
    steps:
      - task: Cache@2
        inputs:
          key: 'maven-cache | $(System.JobName) | **/pom.xml'
          restoreKeys: |
            maven-cache | $(System.JobName)
            maven-cache
          path: $(HOME)/.m2/repository
        displayName: Maven cache
      - template: 'templates/steps/setup_docker.yaml'
      - template: 'templates/steps/setup_java.yaml'
        parameters:
          JDK_VERSION: $(JDK_VERSION)
      - bash: mvn clean test
        displayName: 'Unit tests'

      # Run mutation testing before ITs tests
      - bash: mvn test-compile org.pitest:pitest-maven:mutationCoverage
        displayName: 'Run Mutation Testing'
        env:
          # Test container optimization
          TESTCONTAINERS_RYUK_DISABLED: TRUE
          TESTCONTAINERS_CHECKS_DISABLE: TRUE

      - bash: mvn -Dfailsafe.rerunFailingTestsCount=3 -Dskip.surefire.tests=true verify
        env:
          # Test container optimization
          TESTCONTAINERS_RYUK_DISABLED: TRUE
          TESTCONTAINERS_CHECKS_DISABLE: TRUE
        displayName: "Integration tests"

      - template: 'templates/steps/push_artifacts.yaml'
        parameters:
          JDK_VERSION: variables.JDK_VERSION

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '**/TEST-*.xml'
          testRunTitle: "Integration tests"
        condition: always()